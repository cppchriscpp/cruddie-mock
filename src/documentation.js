var express = require('express'),
    path = require('path'),
    swaggerUi = require('swagger-ui-dist');


/**
 * Registers documentation (swagger-ui) routes on the given server.
 * @param {object} modelData An object with an entry for each model to be documented.
 * @param {object} server An express/json-server server instance.
 * @param {object} config The configuration to use.
 */
module.exports.registerRoutes = function(modelData, server, config) {
    // Add routes for static documentation files. (swagger-ui)
    server.get('/docs', function(req, res) {
        res.send(module.exports.generateSwaggerData(modelData.documentation, config));
    });
    server.get('/documentation', function(req, res) {
        res.sendFile(path.resolve(path.join(__dirname, '/../public/documentation.html')));
    });
    server.use('/documentation', express.static(swaggerUi.getAbsoluteFSPath()));
}

/**
 * Given a collection of models, create swagger-friendly documentation for it.
 * @param {object} models A collection of object name mapped to an example object to extract types from.
 * @param {object} config Configuration used to set up the server. Used to set swagger configuration.
 */
module.exports.generateSwaggerData = function(models, config) {
    var baseObj = {
        "swagger": "2.0",
        "info": {
            "description": "Mock API generated by cruddie-mock ",
            "version": require('../package.json').version,
            "title": "API Mocks"
        },
        "host": config.swaggerUrl,
        "schemes": [
            "http"
        ],
        "paths": {},
        "definitions": {}
    };

    Object.keys(models).forEach(function(modelName) {
        baseObj.paths['/'+modelName] = {
            "get": {
                "tags": [modelName],
                "summary": "Get " + modelName + " objects from the API",
                "description": "Returns the collection of models in the " + modelName + " collection",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "level",
                        "description": "Level to search for",
                        "required": false,
                        "type": "string"
                    }, {
                        "in": "query",
                        "name": "q",
                        "description": "Full text search",
                        "required": false,
                        "type": "string"
                    }, {
                        "in": "query",
                        "name": "_start",
                        "description": "Show from",
                        "required": false,
                        "type": "integer"
                    }, {
                        "in": "query",
                        "name": "_end",
                        "description": "Show to",
                        "required": false,
                        "type": "integer"
                    }, {
                        "in": "query",
                        "name": "_limit",
                        "description": "Limit of records",
                        "required": false,
                        "type": "integer"
                    }, {
                        "in": "query",
                        "name": "_sort",
                        "description": "Sort records by field",
                        "required": false,
                        "type": "string"
                    }, {
                        "in": "query",
                        "name": "_order",
                        "description": "Order by ASC or DESC",
                        "required": false,
                        "type": "string"
                    }, {
                        "in": "query",
                        "name": "_embed",
                        "description": "Other objects to embed, which have a field named \"" + modelName + "Id\" that is equal to the model's id.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    404: {
                        "description": "No objects from the " + modelName + " collection found."
                    }, 
                    200: {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/"+modelName
                        }   
                    }
                }
            }
        };
        if (!config.readOnly) {
            baseObj.paths['/'+modelName].post = {
                "tags": [modelName],
                "summary": "Create a new " + modelName + " object.",
                "description": "Creates a new " + modelName + " object.",
                "produces": [
                    "application/json",
                ],
                "parameters": [{
					"in": "body",
					"name": "body",
					"description": "Object that needs to be created",
					"required": true,
					"schema": {
						"$ref": "#/definitions/"+modelName
					}
				}],
                "responses": {
                    "404": {
                        "description": "Object not found"
                    },
                    "200": {
                        "description": "successful operation",
                        "schema": {
                        "$ref": "#/definitions/"+modelName
                        }
                    },
                    "405": {
                        "description": "Invalid ID supplied"
                    }
                }
            }
        }
        baseObj.paths['/'+modelName+'/{id}'] = {
            "get": {
                "tags": [modelName],
                "summary": "Fetches the model by its id.",
                "description": "Returns the given model.",
                "produces": [
                    "application/json",
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of model that needs to be fetched",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }, {
                        "in": "query",
                        "name": "_embed",
                        "description": "Other objects to embed, which have a field named \"" + modelName + "Id\" that is equal to the model's id.",
                        "required": false,
                        "type": "string"
                    }
                    
                ],
                "responses": {
                    "404": {
                        "description": "Object not found"
                    },
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/"+modelName
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    }
                }
            }
        };
        if (!config.readOnly) {
            baseObj.paths['/'+modelName+'/{id}'].put = {
                "tags": [modelName],
				"summary": "Update an existing object",
				"description": "",
				"operationId": "updatePet",
				"produces": ["application/json"],
				"parameters": [                    {
                    "in": "path",
                    "name": "id",
                    "description": "ID of model that needs to be updated",
                    "required": true,
                    "type": "integer",
                    "format": "int64"
                }, {
					"in": "body",
					"name": "body",
					"description": "Object that needs to be updated",
					"required": true,
					"schema": {
						"$ref": "#/definitions/"+modelName
					}
				}],
				"responses": {
					"400": {
						"description": "Invalid ID supplied"
					},
					"404": {
						"description": "Object not found"
					},
					"405": {
						"description": "Validation exception"
					}
				}
            };

            baseObj.paths['/'+modelName+'/{id}'].delete = {
                "tags": [modelName],
                "summary": "Deletes the model with this id.",
                "description": "Deletes the given model.",
                "produces": [
                    "application/json",
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of model that needs to be removed",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Object not found"
                    },
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    }
                }
            };

        }

        baseObj.definitions[modelName] = {
            properties: {}
        };
        Object.keys(models[modelName]).forEach(function(key) {
            baseObj.definitions[modelName].properties[key] = typeof models[modelName][key];
        });

    });

    return baseObj;

}
